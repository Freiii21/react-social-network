{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","message","owner","src","friendAvatar","alt","myAvatar","DialogItem","mainClass","activeInterlocutor","id","dialog","active","avatar","onClick","changeActiveCompanion","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","answerField","Field","component","Textarea","placeholder","inputField","validate","required","sendMessage","compose","connect","state","dialogsPage","authorizedUserId","auth","userId","dispatch","newMessageBody","sendMessageActionCreator","getUserProfile","companionId","changeActiveCompanionAC","withAuthRedirect","useEffect","usersList","dialogs","map","d","messagesElements","messages","m","dialogsItems","line","messagesField","companion","values"],"mappings":"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","file":"static/js/3.24ec0b0f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1WSDg\",\"dialogsItems\":\"Dialogs_dialogsItems__3bjv9\",\"line\":\"Dialogs_line__2SYE5\",\"messagesField\":\"Dialogs_messagesField__1NgB3\",\"messages\":\"Dialogs_messages__3apIQ\",\"message\":\"Dialogs_message__3UW0z\",\"me\":\"Dialogs_me__1zjPe\",\"you\":\"Dialogs_you__2DuOo\",\"answerField\":\"Dialogs_answerField__1hM6v\",\"inputField\":\"Dialogs_inputField__3wGxi\",\"sendMessage\":\"Dialogs_sendMessage__3OVHo\",\"companion\":\"Dialogs_companion__3f3cO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__2EsNO\",\"avatar\":\"DialogItem_avatar__2dWX9\",\"name\":\"DialogItem_name__1aT2G\",\"active\":\"DialogItem_active__1XuwC\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    owner: string\r\n    myAvatar: string\r\n    friendAvatar: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s[props.owner]}>\r\n                {props.owner !== \"me\" ? <img src={props.friendAvatar} alt='ava'/> : false}\r\n                {props.message}\r\n                {props.owner === \"me\" ? <img src={props.myAvatar} alt='ava'/> : false}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n    changeActiveCompanion: (companionId: number) => void\r\n    activeInterlocutor: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    const onCompanionClick = () => {\r\n        props.changeActiveCompanion(props.id)\r\n    }\r\n    const mainClass = props.activeInterlocutor !== props.id ? s.dialog : `${s.dialog} ${s.active}`\r\n\r\n    return (\r\n        <div className={mainClass}>\r\n            <img src={props.avatar} alt=\"\" onClick={onCompanionClick} className={s.avatar}/>\r\n            <div className={s.name}>{props.name}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\nexport type DialogsFormDataType = {\r\n    newMessageBody: string\r\n    authorizedUserId: number | null\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    useEffect(()=>{\r\n        if(props.authorizedUserId){\r\n            props.getUserProfile(props.authorizedUserId)\r\n        }\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    const usersList = props.dialogsPage.dialogs.map(d =>\r\n        <DialogItem name={d.name}\r\n                    key={d.id}\r\n                    id={d.id}\r\n                    avatar={d.avatar}\r\n                    changeActiveCompanion={props.changeActiveCompanion}\r\n                    activeInterlocutor={props.dialogsPage.activeInterlocutor}\r\n        />);\r\n\r\n    const messagesElements = props.dialogsPage.messages[props.dialogsPage.activeInterlocutor].map(m =>\r\n        <Message\r\n            message={m.message}\r\n            key={m.id}\r\n            owner={m.owner}\r\n            myAvatar={props.dialogsPage.myAvatar}\r\n            friendAvatar={m.avatar}\r\n        />);\r\n\r\n    const addNewMessage = (values: DialogsFormDataType) => {\r\n        props.sendMessage(values.newMessageBody, props.dialogsPage.activeInterlocutor);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <div>\r\n                    {usersList}\r\n                </div>\r\n                <div className={s.line}/>\r\n            </div>\r\n            <div className={s.messagesField}>\r\n                <div className={s.messages}>\r\n                    <div className={s.companion}>\r\n                        <img src={props.dialogsPage.dialogs[props.dialogsPage.activeInterlocutor].avatar} alt=\"\"/>\r\n                        <div>{props.dialogsPage.dialogs[props.dialogsPage.activeInterlocutor].name}</div>\r\n                    </div>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<DialogsFormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.answerField}>\r\n\r\n                    <Field component={Textarea}\r\n                           name=\"newMessageBody\"\r\n                           placeholder=\"Type a message...\"\r\n                           className={s.inputField}\r\n                           validate={[required, maxLength50]}\r\n                    />\r\n\r\n                <div>\r\n                    <button className={s.sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageFormRedux = reduxForm<DialogsFormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm);","import React from 'react';\r\nimport {\r\n    changeActiveCompanionAC,\r\n    InitialStateDialogsPageType,\r\n    sendMessageActionCreator\r\n} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch } from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {getUserProfile} from '../../redux/profile-reducer';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateDialogsPageType\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string, userId: number) => void\r\n    getUserProfile: (userId: number) => void\r\n    changeActiveCompanion: (companionId: number) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        authorizedUserId: state.auth.userId\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch):MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string, userId: number) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody, userId))\r\n        },\r\n        getUserProfile: (userId: number) => {\r\n            //@ts-ignore\r\n            dispatch(getUserProfile(userId))\r\n        },\r\n        changeActiveCompanion: (companionId: number) => {\r\n            dispatch(changeActiveCompanionAC(companionId))\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n/*\r\nlet AuthRedirectComponent = withAuthRedirect(Dialogs);\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);*/\r\n"],"sourceRoot":""}