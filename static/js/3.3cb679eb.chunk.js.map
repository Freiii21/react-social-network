{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","Message","props","className","s","message","owner","src","friendAvatar","alt","messageTextFiled","myAvatar","DialogItem","mainClass","activeInterlocutor","id","dialog","active","onClick","changeActiveCompanion","avatar","name","compose","connect","state","dialogsPage","authorizedUserId","auth","userId","dispatch","sendMessage","newMessageBody","sendMessageActionCreator","getUserProfile","companionId","changeActiveCompanionAC","withAuthRedirect","bottomPage","useRef","useEffect","current","scrollIntoView","behavior","block","messages","usersList","dialogs","map","d","messagesElementsFromState","m","messagesElements","length","messagesFiller","useState","setMessage","error","setError","dialogsItems","line","messagesField","companion","answerField","textareaFiled","placeholder","value","onChange","e","currentTarget","inputField","ref"],"mappings":"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","file":"static/js/3.3cb679eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1WSDg\",\"dialogsItems\":\"Dialogs_dialogsItems__3bjv9\",\"line\":\"Dialogs_line__2SYE5\",\"messagesField\":\"Dialogs_messagesField__1NgB3\",\"messages\":\"Dialogs_messages__3apIQ\",\"answerField\":\"Dialogs_answerField__1hM6v\",\"inputField\":\"Dialogs_inputField__3wGxi\",\"sendMessage\":\"Dialogs_sendMessage__3OVHo\",\"companion\":\"Dialogs_companion__3f3cO\",\"textareaFiled\":\"Dialogs_textareaFiled__FtUw7\",\"error\":\"Dialogs_error__GBICm\",\"messagesFiller\":\"Dialogs_messagesFiller__o41OG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1GtsN\",\"me\":\"Message_me__2rugh\",\"you\":\"Message_you__2RIN_\",\"messageTextFiled\":\"Message_messageTextFiled__TLaxr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__2EsNO\",\"avatar\":\"DialogItem_avatar__2dWX9\",\"name\":\"DialogItem_name__1aT2G\",\"active\":\"DialogItem_active__1XuwC\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    owner: string\r\n    myAvatar: string\r\n    friendAvatar: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    // const message = props.message.replace(\r\n    //     /\\b(https?\\:\\/\\/\\S+)/mg,\r\n    //     '<a href=\"$1\">$1</a>'\r\n    // );\r\n\r\n\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s[props.owner]}>\r\n                {props.owner !== \"me\" ? <img src={props.friendAvatar} alt='ava'/> : false}\r\n                <div className={s.messageTextFiled}>\r\n                    {props.message}\r\n                </div>\r\n                {props.owner === \"me\" ? <img src={props.myAvatar} alt='ava'/> : false}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n    changeActiveCompanion: (companionId: number) => void\r\n    activeInterlocutor: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    const onCompanionClick = () => {\r\n        props.changeActiveCompanion(props.id)\r\n    }\r\n    const mainClass = props.activeInterlocutor !== props.id ? s.dialog : `${s.dialog} ${s.active}`\r\n\r\n    return (\r\n        <div className={mainClass} onClick={onCompanionClick}>\r\n            <img src={props.avatar} alt=\"\" className={s.avatar}/>\r\n            <div className={s.name}>{props.name}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {\r\n    changeActiveCompanionAC,\r\n    InitialStateDialogsPageType,\r\n    sendMessageActionCreator\r\n} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch } from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {getUserProfile} from '../../redux/profile-reducer';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateDialogsPageType\r\n    authorizedUserId: number | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string, userId: number) => void\r\n    getUserProfile: (userId: number) => void\r\n    changeActiveCompanion: (companionId: number) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        authorizedUserId: state.auth.userId\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch):MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string, userId: number) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody, userId))\r\n        },\r\n        getUserProfile: (userId: number) => {\r\n            //@ts-ignore\r\n            dispatch(getUserProfile(userId))\r\n        },\r\n        changeActiveCompanion: (companionId: number) => {\r\n            dispatch(changeActiveCompanionAC(companionId))\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n/*\r\nlet AuthRedirectComponent = withAuthRedirect(Dialogs);\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);*/\r\n","import React, {ChangeEvent, useEffect, useRef, useState} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const bottomPage = useRef<null | HTMLDivElement>(null);\r\n    const bottomPageRefScroll = () => {\r\n        bottomPage.current && bottomPage.current.scrollIntoView({behavior: 'smooth', block: 'start'});\r\n    }\r\n    useEffect(()=>{\r\n        if(props.authorizedUserId){\r\n            props.getUserProfile(props.authorizedUserId)\r\n        }\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        bottomPageRefScroll();\r\n        // eslint-disable-next-line\r\n    },[props.dialogsPage.messages, props.dialogsPage.activeInterlocutor])\r\n\r\n    const usersList = props.dialogsPage.dialogs.map(d =>\r\n        <DialogItem name={d.name}\r\n                    key={d.id}\r\n                    id={d.id}\r\n                    avatar={d.avatar}\r\n                    changeActiveCompanion={props.changeActiveCompanion}\r\n                    activeInterlocutor={props.dialogsPage.activeInterlocutor}\r\n        />);\r\n\r\n    const messagesElementsFromState = props.dialogsPage.messages[props.dialogsPage.activeInterlocutor].map(m =>\r\n        <Message\r\n            message={m.message}\r\n            key={m.id}\r\n            owner={m.owner}\r\n            myAvatar={props.dialogsPage.myAvatar}\r\n            friendAvatar={m.avatar}\r\n        />);\r\n    const messagesElements = messagesElementsFromState.length > 0 ? messagesElementsFromState\r\n        : <div className={s.messagesFiller}>There are no messages yet...</div>\r\n\r\n    const [message, setMessage] = useState<string>(\"\")\r\n    const [error, setError] = useState<string>(\"\")\r\n    const omMessageType = (e:ChangeEvent<HTMLTextAreaElement>) => {\r\n        setError(\"\")\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n\r\n    const addNewMessage = () => {\r\n        if(!message){\r\n            setError(\"Message cannot be empty\")\r\n        } else {\r\n            props.sendMessage(message, props.dialogsPage.activeInterlocutor);\r\n            setMessage(\"\");\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <div>\r\n                    {usersList}\r\n                </div>\r\n                <div className={s.line}/>\r\n            </div>\r\n            <div className={s.messagesField}>\r\n                <div className={s.messages}>\r\n                    <div className={s.companion}>\r\n                        <img src={props.dialogsPage.dialogs[props.dialogsPage.activeInterlocutor].avatar} alt=\"\"/>\r\n                        <div>{props.dialogsPage.dialogs[props.dialogsPage.activeInterlocutor].name}</div>\r\n                    </div>\r\n                    {messagesElements}\r\n                </div>\r\n                {/*<AddMessageFormRedux onSubmit={addNewMessage}/>*/}\r\n                <div className={s.answerField}>\r\n                    <div className={s.textareaFiled}>\r\n                        <textarea placeholder=\"Type a message...\"\r\n                                 value={message}\r\n                                 onChange={omMessageType}\r\n                                 className={s.inputField}/>\r\n                        {error && <div className={s.error}>{error}</div>}\r\n                    </div>\r\n                    <div ref={bottomPage}>\r\n                        <button className={s.sendMessage} onClick={addNewMessage}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}