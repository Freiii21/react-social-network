{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","message","owner","src","avatar","alt","DialogItem","path","id","dialog","to","isActive","activeLink","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","answerField","Field","component","Textarea","placeholder","inputField","validate","required","sendMessage","compose","connect","state","dialogsPage","dispatch","newMessageBody","sendMessageActionCreator","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,yBAAyB,GAAK,oBAAoB,IAAM,qBAAqB,YAAc,6BAA6B,WAAa,4BAA4B,YAAc,+B,qFCQ7XC,EAAU,SAACC,GACpB,OACI,qBAAKC,UAAWC,IAAEC,QAAlB,SACI,sBAAKF,UAAWC,IAAEF,EAAMI,OAAxB,UACqB,OAAhBJ,EAAMI,OAAiB,qBAAKC,IAAKL,EAAMM,OAAQC,IAAI,QACnDP,EAAMG,QACU,OAAhBH,EAAMI,OAAiB,qBAAKC,IAAKL,EAAMM,OAAQC,IAAI,c,QCLvDC,EAAa,SAACR,GACvB,IAAIS,EAAO,YAAcT,EAAMU,GAE/B,OACI,sBAAKT,UAAWC,IAAES,OAAlB,UACI,qBAAKN,IAAKL,EAAMM,OAAQC,IAAI,KAC5B,cAAC,IAAD,CAASK,GAAIH,EAAMR,UAAW,qBAAEY,SAA0BX,IAAEY,WAAa,IAAzE,SACKd,EAAMe,W,kCCJjBC,EAAcC,YAAiB,IAoD/BC,EAAsBC,YAA+B,CAACC,KAAM,wBAAtCD,EArBL,SAACnB,GACpB,OACI,sBAAMqB,SAAUrB,EAAMsB,aAAtB,SACI,sBAAKrB,UAAWC,IAAEqB,YAAlB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXX,KAAK,iBACLY,YAAY,oBACZ1B,UAAWC,IAAE0B,WACbC,SAAU,CAACC,IAAUd,OAGhC,8BACI,wBAAQf,UAAWC,IAAE6B,YAArB,4B,wBCzBLC,sBACXC,aAdoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACC,GACxB,MAAO,CACHL,YAAa,SAACM,GACVD,EAASE,YAAyBD,SAO1CE,IAFWP,EDjBQ,SAAChC,GACpB,IAAMwC,EAAkBxC,EAAMmC,YAAYM,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAY5B,KAAM4B,EAAE5B,KAERL,GAAIiC,EAAEjC,GACNJ,OAAQqC,EAAErC,QAFLqC,EAAEjC,OAGxEkC,EAAmB5C,EAAMmC,YAAYU,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAS3C,QAAS2C,EAAE3C,QAEXC,MAAO0C,EAAE1C,MACTE,OAAQwC,EAAExC,QAFLwC,EAAEpC,OAQ7E,OACI,sBAAKT,UAAWC,IAAEuC,QAAlB,UACI,qBAAKxC,UAAWC,IAAE6C,aAAlB,SACKP,IAEL,sBAAKvC,UAAWC,IAAE2C,SAAlB,UACI,8BAAMD,IACN,cAAC1B,EAAD,CAAqBG,SAXX,SAAC2B,GACnBhD,EAAM+B,YAAYiB,EAAOX","file":"static/js/3.ea1b1d72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1WSDg\",\"dialogsItems\":\"Dialogs_dialogsItems__3bjv9\",\"dialog\":\"Dialogs_dialog__331nV\",\"activeLink\":\"Dialogs_activeLink__162lv\",\"messages\":\"Dialogs_messages__3apIQ\",\"message\":\"Dialogs_message__3UW0z\",\"me\":\"Dialogs_me__1zjPe\",\"you\":\"Dialogs_you__2DuOo\",\"answerField\":\"Dialogs_answerField__1hM6v\",\"inputField\":\"Dialogs_inputField__3wGxi\",\"sendMessage\":\"Dialogs_sendMessage__3OVHo\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    owner: string\r\n    avatar: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s[props.owner]}>\r\n                {props.owner !== \"me\" ? <img src={props.avatar} alt='ava'/> : false}\r\n                {props.message}\r\n                {props.owner === \"me\" ? <img src={props.avatar} alt='ava'/> : false}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.avatar} alt=\"\"/>\r\n            <NavLink to={path} className={({isActive}) => (isActive ? s.activeLink : '')}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\nexport type DialogsFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name}\r\n                                                                           key={d.id}\r\n                                                                           id={d.id}\r\n                                                                           avatar={d.avatar}/>);\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message}\r\n                                                                          key={m.id}\r\n                                                                          owner={m.owner}\r\n                                                                          avatar={m.avatar}/>);\r\n\r\n    const addNewMessage = (values: DialogsFormDataType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<DialogsFormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.answerField}>\r\n                <div>\r\n                    <Field component={Textarea}\r\n                           name=\"newMessageBody\"\r\n                           placeholder=\"Type a message...\"\r\n                           className={s.inputField}\r\n                           validate={[required, maxLength50]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className={s.sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageFormRedux = reduxForm<DialogsFormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm);","import React from 'react';\r\nimport {\r\n    InitialStateDialogsPageType,\r\n    sendMessageActionCreator\r\n} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch } from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateDialogsPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch):MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n/*\r\nlet AuthRedirectComponent = withAuthRedirect(Dialogs);\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);*/\r\n"],"sourceRoot":""}